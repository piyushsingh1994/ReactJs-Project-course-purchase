{"version":3,"sources":["Coursesales.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Coursesales","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","total","sumPrice","bind","assertThisInitialized","price","setState","_this2","console","log","items","courses","map","item","i","react_default","a","createElement","Coursesales_Course","name","key","active","id","Component","Course","_this3","clicker","className","onClick","App","src","logo","alt","src_Coursesales","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"4RAEMA,cAIJ,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,MAAO,GAETR,EAAKS,SAAST,EAAKS,SAASC,KAAdT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KANEA,wEAHTY,GACPT,KAAKU,SAAS,CAACL,MAAOL,KAAKI,MAAMC,MAAOI,sDAUlC,IAAAE,EAAAX,KACNY,QAAQC,IAAIb,KAAKJ,MAAMkB,OACvB,IAAIC,EAASf,KAAKJ,MAAMkB,MAAME,IAAI,SAACC,EAAMC,GACvC,OAAOC,EAAAC,EAAAC,cAACC,EAAD,CAAQC,KAAMN,EAAKM,KAAMd,MAAOQ,EAAKR,MAC5Ce,IAAKN,EAAGZ,SAAUK,EAAKL,SAAUmB,OAAQR,EAAKQ,WAEhD,OAEEN,EAAAC,EAAAC,cAAA,WACFF,EAAAC,EAAAC,cAAA,oCACAF,EAAAC,EAAAC,cAAA,OAAKK,GAAG,WACPX,GAEDI,EAAAC,EAAAC,cAAA,KAAGK,GAAG,SAAN,SAAoBP,EAAAC,EAAAC,cAAA,SAAIrB,KAAKI,MAAMC,OAAnC,aAzBsBsB,aA+BpBC,cAMJ,SAAAA,EAAYhC,GAAM,IAAAiC,EAAA,OAAA/B,OAAAC,EAAA,EAAAD,CAAAE,KAAA4B,IAChBC,EAAA/B,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA8B,GAAAzB,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXqB,QAAQ,GAEVI,EAAKC,QAAQD,EAAKC,QAAQvB,KAAbT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAA+B,KANGA,yEAJhB,IAAIJ,GAASzB,KAAKI,MAAMqB,OACxBzB,KAAKU,SAAS,CAACe,OAAOA,IACtBzB,KAAKJ,MAAMU,SAASmB,EAAQzB,KAAKJ,MAAMa,OAAST,KAAKJ,MAAMa,yDAW3D,OACEU,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,KAAGU,UAAW/B,KAAKI,MAAMqB,OAAQ,SAAU,GAAIO,QAAShC,KAAK8B,SAAU9B,KAAKJ,MAAM2B,KAAKJ,EAAAC,EAAAC,cAAA,SAAIrB,KAAKJ,MAAMa,OAAtG,aAjBckB,aAuBNhC,ICpBAsC,mLAfX,OACEd,EAAAC,EAAAC,cAAA,OAAKU,UAAU,OACbZ,EAAAC,EAAAC,cAAA,UAAQU,UAAU,cAChBZ,EAAAC,EAAAC,cAAA,OAAKa,IAAKC,IAAMJ,UAAU,WAAWK,IAAI,SACzCjB,EAAAC,EAAAC,cAAA,4CAGAF,EAAAC,EAAAC,cAACgB,EAAD,CAAavB,MArBP,CACV,CACAS,KAAM,4BAA6Bd,MAAO,KAE5C,CACAc,KAAM,6BAA8Bd,MAAO,KAE7C,CACAc,KAAM,gCAAiCd,MAAO,KAEhD,CACAc,KAAM,0BAA2Bd,MAAO,iBAbtBkB,aCOEW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.d31c2400.chunk.js","sourcesContent":["import React, { Component} from 'react';\r\n\r\nclass Coursesales extends Component {\r\n  sumPrice(price) {\r\n    this.setState({total: this.state.total+ price});\r\n  }\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state = {\r\n      total: 0\r\n    };\r\n    this.sumPrice=this.sumPrice.bind(this);\r\n  }\r\n  render(){\r\n    console.log(this.props.items);\r\n    var courses= this.props.items.map((item, i)=>{\r\n      return <Course name={item.name} price={item.price}\r\n      key={i} sumPrice={this.sumPrice} active={item.active}  />\r\n    })\r\n    return(\r\n\r\n      <div>\r\n    <h1> You can buy Courses: </h1>\r\n    <div id=\"courses\">\r\n    {courses}\r\n    </div>\r\n    <p id=\"total\">Total <b>{this.state.total}</b> </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Course extends Component {\r\n  clicker(){\r\n    var active= !this.state.active;\r\n    this.setState({active:active});\r\n    this.props.sumPrice(active? this.props.price : -this.props.price);\r\n  }\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state = {\r\n      active: false\r\n    };\r\n    this.clicker=this.clicker.bind(this);\r\n  }\r\n  render(){\r\n    return(\r\n      <div>\r\n       <p className={this.state.active? 'active': ''} onClick={this.clicker}>{this.props.name}<b>{this.props.price}</b> </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Coursesales;\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Coursesales from './Coursesales';\n\nclass App extends Component {\n  render() {\n    var courses=[\n      {\n      name: 'Complete ios10 dev course', price: 199\n    },\n    {\n    name: 'Complete pentesting course', price: 299\n  },\n  {\n  name: 'Complete front end dev course', price: 399\n},\n{\nname: 'Complete Web dev course', price: 599\n}\n];\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Welcome to course Purchase Page\n          </p>\n          <Coursesales items={courses} />\n\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}